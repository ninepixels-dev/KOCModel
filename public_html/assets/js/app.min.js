"use strict";

function fieldSpacingToolConf($routeProvider) {
    $routeProvider.otherwise({
        redirectTo: "/homepage"
    }), $routeProvider.when("/homepage", {
        templateUrl: "assets/templates/homepage.html"
    }), $routeProvider.when("/general-considerations", {
        templateUrl: "assets/templates/general-considerations.html"
    }), $routeProvider.when("/concept-selection/concept-general", {
        templateUrl: "assets/templates/concept-general.html"
    }), $routeProvider.when("/concept-selection/concept-siting", {
        templateUrl: "assets/templates/concept-siting.html"
    }), $routeProvider.when("/concept-selection/concept-layout", {
        templateUrl: "assets/templates/concept-layout.html"
    }), $routeProvider.when("/concept-selection/concept-equipment", {
        templateUrl: "assets/templates/concept-equipment.html"
    }), $routeProvider.when("/concept-selection/concept-bra", {
        templateUrl: "assets/templates/concept-bra.html"
    }), $routeProvider.when("/concept-selection/concept-distance/wellhead-facilities", {
        templateUrl: "assets/templates/concept-stage-wellhead-facilities.html"
    }), $routeProvider.when("/concept-selection/concept-distance/flammable-distances", {
        templateUrl: "assets/templates/flammable-distances.html"
    }), $routeProvider.when("/concept-selection/concept-distance/flowlines", {
        templateUrl: "assets/templates/concept-stage-flowlines.html"
    }), $routeProvider.when("/concept-selection/concept-distance/typical-flammable-distances", {
        templateUrl: "assets/templates/typical-flammable-distances.html"
    }), $routeProvider.when("/concept-selection/concept-distance/unmanned-facilities", {
        templateUrl: "assets/templates/concept-stage-unmanned-facilities.html"
    }), $routeProvider.when("/concept-selection/concept-distance/flammable-manned-distances", {
        templateUrl: "assets/templates/flammable-manned-distances.html"
    }), $routeProvider.when("/concept-selection/concept-distance/tanks-distances", {
        templateUrl: "assets/templates/tanks-distances.html"
    }), $routeProvider.when("/concept-selection/concept-distance/h2s-facilities", {
        templateUrl: "assets/templates/concept-stage-h2s-facilities.html"
    }), $routeProvider.when("/concept-selection/concept-distance/blowouts/50", {
        templateUrl: "assets/templates/blowouts-50.html"
    }), $routeProvider.when("/concept-selection/concept-distance/blowouts/100", {
        templateUrl: "assets/templates/blowouts-100.html"
    }), $routeProvider.when("/feed-spacing/feed-general-considerations", {
        templateUrl: "assets/templates/feed-general-considerations.html"
    }), $routeProvider.when("/feed-spacing/siting-considerations", {
        templateUrl: "assets/templates/siting-considerations.html"
    }), $routeProvider.when("/feed-spacing/layout-considerations", {
        templateUrl: "assets/templates/layout-considerations.html"
    }), $routeProvider.when("/feed-spacing/equipment-considerations", {
        templateUrl: "assets/templates/equipment-considerations.html"
    }), $routeProvider.when("/feed-spacing/bra-considerations", {
        templateUrl: "assets/templates/bra-considerations.html"
    }), $routeProvider.when("/feed-spacing/determination-distances/run-explosion-model", {
        templateUrl: "assets/templates/feed-spacing-explosion-model.html"
    }), $routeProvider.when("/feed-spacing/determination-distances/risk-plant/flowlines-model", {
        templateUrl: "assets/templates/risk-plant-flowlines-model.html"
    }), $routeProvider.when("/feed-spacing/determination-distances/risk-plant/product-lines-model", {
        templateUrl: "assets/templates/risk-plant-product-lines-model.html"
    }), $routeProvider.when("/feed-spacing/determination-distances/risk-plant/gas-lines-model", {
        templateUrl: "assets/templates/risk-plant-gas-lines-model.html"
    }), $routeProvider.when("/feed-spacing/determination-distances/risk-public/flowlines-model", {
        templateUrl: "assets/templates/risk-public-flowlines-model.html"
    }), $routeProvider.when("/feed-spacing/determination-distances/risk-public/product-lines-model", {
        templateUrl: "assets/templates/risk-public-product-lines-model.html"
    }), $routeProvider.when("/feed-spacing/determination-distances/risk-public/gas-lines-model", {
        templateUrl: "assets/templates/risk-public-gas-lines-model.html"
    }), $routeProvider.when("/other/detailed-design", {
        templateUrl: "assets/templates/detailed-design.html"
    }), $routeProvider.when("/other/detailed-design-bra", {
        templateUrl: "assets/templates/detailed-design-bra.html"
    })
}

function workbookService() {}

function toColumnName(num) {
    for (var ret = "", a = 1, b = 26;
            (num -= a) >= 0; a = b, b *= 26)
        ret = String.fromCharCode(parseInt(num % b / a) + 65) + ret;
    return ret
}

function wellHeadFacilities() {
    return {
        link: function (scope, elem, attr, ctrl) {
            var url = "workbooks/main.xlsx",
                    oReq = new XMLHttpRequest;
            oReq.open("GET", url, !0), oReq.responseType = "arraybuffer", oReq.onload = function (e) {
                for (var arraybuffer = oReq.response, data = new Uint8Array(arraybuffer), arr = new Array, i = 0; i != data.length; ++i)
                    arr[i] = String.fromCharCode(data[i]);
                var bstr = arr.join(""),
                        workbook = XLSX.read(bstr, {
                            type: "binary"
                        });
                scope.workbook = workbook.Sheets.Sheet2;
                for (var i = 85; 108 >= i; )
                    $("#facility1").append("<option>" + scope.workbook["A" + i].h + "</option>"), $("#facility2").append("<option>" + scope.workbook["A" + i].h + "</option>"), i++;
                $("#facility1, #facility2").change(function () {
                    for (var r = 1, c = 1; 25 > r && (!scope.workbook["A" + (84 + r)] || scope.workbook["A" + (84 + r)].h !== $("#facility1").val()); )
                        r++;
                    for (; 24 > c && (!scope.workbook["A" + (84 + c)] || scope.workbook["A" + (84 + c)].h !== $("#facility2").val()); )
                        c++;
                    "" !== $("#facility1").val() && "" !== $("#facility2").val() && ("undefined" == typeof scope.workbook[toColumnName(c + 1) + "" + (84 + r)] ? $("#result").html(scope.workbook[toColumnName(r + 1) + "" + (84 + c)].w) : $("#result").html(scope.workbook[toColumnName(c + 1) + "" + (84 + r)].w))
                })
            }, oReq.send()
        }
    }
}

function toColumnName(num) {
    for (var ret = "", a = 1, b = 26;
            (num -= a) >= 0; a = b, b *= 26)
        ret = String.fromCharCode(parseInt(num % b / a) + 65) + ret;
    return ret
}

function unmannedFacilities() {
    return {
        link: function (scope, elem, attr, ctrl) {
            var url = "workbooks/main.xlsx",
                    oReq = new XMLHttpRequest;
            oReq.open("GET", url, !0), oReq.responseType = "arraybuffer", oReq.onload = function (e) {
                for (var arraybuffer = oReq.response, data = new Uint8Array(arraybuffer), arr = new Array, i = 0; i != data.length; ++i)
                    arr[i] = String.fromCharCode(data[i]);
                var bstr = arr.join(""),
                        workbook = XLSX.read(bstr, {
                            type: "binary"
                        });
                scope.workbook = workbook.Sheets.Sheet2, console.log(workbook);
                for (var i = 110; 125 >= i; )
                    $("#facility1").append("<option>" + scope.workbook["A" + i].w + "</option>"), $("#facility2").append("<option>" + scope.workbook["A" + i].w + "</option>"), i++;
                $("#facility1, #facility2").change(function () {
                    for (var r = 1, c = 1; 16 > r && (!scope.workbook["A" + (109 + r)] || scope.workbook["A" + (109 + r)].w !== $("#facility1").val()); )
                        r++;
                    for (; 16 > c && (!scope.workbook["A" + (109 + c)] || scope.workbook["A" + (109 + c)].w !== $("#facility2").val()); )
                        c++;
                    "" !== $("#facility1").val() && "" !== $("#facility2").val() && ("undefined" == typeof scope.workbook[toColumnName(c + 1) + "" + (109 + r)] ? $("#result").html(scope.workbook[toColumnName(r + 1) + "" + (109 + c)].w) : $("#result").html(scope.workbook[toColumnName(c + 1) + "" + (109 + r)].w))
                })
            }, oReq.send()
        }
    }
}

function flowlines() {
    return {
        link: function (scope, elem, attr, ctrl) {
            $('button[type="submit"]').click(function () {
                var D = $('input[name="pipelineDiameter"]').val(),
                        P = $('input[name="operatingPresure"]').val(),
                        Q = $('input[name="flowType"]:checked').val(),
                        a = (2 ^ D) / 32e3 + D / 160 + 11,
                        b = P / 32 + 1.4,
                        x = 10 * (Q * a + b) / 10;
                console.log(D, P, Q), $("#result").html(x)
            })
        }
    }
}

function flammableDistances() {
    return {
        link: function (scope, elem, attr, ctrl) {
            $(".hidden-content-table tr").each(function (index, element) {
                index > 0 ? $("#selectController1").append("<option>" + $(this).attr("data") + "</option>") : $(this).find("th").each(function () {
                    $("#selectController2").append("<option>" + $(this).attr("data") + "</option>")
                })
            });
            var row, column;
            $("#selectController1, #selectController2").change(function () {
                var controllerName = $(this)[0].id;
                if ("selectController1" === controllerName ? row = $(".hidden-content-table").find("tr[data='" + $(this).val() + "']").prevAll().length + 1 : column = $(".hidden-content-table").find("th[data='" + $(this).val() + "']").prevAll().length + 1, void 0 !== row && void 0 !== column) {
                    var rowElement = $(".hidden-content-table tr:nth-of-type(" + row + ")"),
                            columnElement = rowElement.find("td:nth-of-type(" + column + ")");
                    if (void 0 === columnElement.html()) {
                        var tempRow = column + 1,
                                tempColumn = row - 1;
                        rowElement = $(".hidden-content-table tr:nth-of-type(" + tempRow + ")"), columnElement = rowElement.find("td:nth-of-type(" + tempColumn + ")")
                    }
                    $("#result").html(columnElement.html())
                }
            })
        }
    }
}

function tanksDistances() {
    return {
        link: function (scope, elem, attr, ctrl) {
            $(".hidden-content-table tr").each(function (index, element) {
                $("#selectController1").append("<option>" + $(this).find("td:first-of-type()").html() + "</option>")
            }), $("#selectController1").change(function () {
                var controllerValue = $(this).val();
                $(".hidden-content-table td:first-of-type()").each(function (index, element) {
                    $(this).html() === controllerValue && $("#result").html($(this).siblings("td").html())
                })
            })
        }
    }
}
fieldSpacingToolConf.$inject = ["$routeProvider"], workbookService.$inject = [],
        angular.module("fieldSpacingTool", [
            "ngRoute",
            "fieldSpacingTool.services",
            "fieldSpacingTool.wellhead",
            "fieldSpacingTool.unmanned",
            "fieldSpacingTool.flowlines",
            "fieldSpacingTool.flammableDistances",
            "fieldSpacingTool.tanksDistances",
            "fieldSpacingTool.h2sFacilities",
            "fieldSpacingTool.plantProductLinesModel",
            "fieldSpacingTool.plantGasLinesModel",
            "fieldSpacingTool.plantFlowLinesModel",
            "fieldSpacingTool.publicGasLinesModel",
            "fieldSpacingTool.publicProductLinesModel",
            "fieldSpacingTool.publicFlowLinesModel",
            "fieldSpacingTool.explosionModel"
        ]).config(["$routeProvider", fieldSpacingToolConf]).service("workbook", workbookService), wellHeadFacilities.$inject = [], angular.module("fieldSpacingTool.wellhead", []).directive("wellHeadFacilities", wellHeadFacilities), unmannedFacilities.$inject = [], angular.module("fieldSpacingTool.unmanned", []).directive("unmannedFacilities", unmannedFacilities), flowlines.$inject = [], angular.module("fieldSpacingTool.flowlines", []).directive("flowlines", flowlines), flammableDistances.$inject = [], angular.module("fieldSpacingTool.flammableDistances", []).directive("flammableDistances", flammableDistances), tanksDistances.$inject = [],
        angular.module("fieldSpacingTool.tanksDistances", []).directive("tanksDistances", tanksDistances);